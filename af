#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

class AutoFocusCommandLine
    def self.parse(args)
        options = OpenStruct.new
        opts = OptionParser.new

        opts.on("-a","--add STRING","Add an item to the end of the list",
                String)\
        do |v|
            options.add_flag = true
            options.add_content = v
        end

        opts.on("-c", "--change NUMBER",
                "Change the numbered entry to something else,",
                "  eg. to fix a typo.", Integer)\
        do |v|
            options.change_flag = true
            options.change_number = v + 1
        end

        opts.on("-l", "--list", "List a 'page' of actions, defaulting to the",
                "  first one with pending actions on it.")\
        do
            options.list_flag = true
        end

        opts.on("-n", "--numbers", "Used with -l, shows the numbers of the actions.")\
        do
            options.numbers_flag = true
        end

        opts.on("-m", "--mark NUMBER", "Mark the numbered entry as done.",
                Integer)\
        do |v|
            options.mark_flag = true
            options.mark_number = v + 1
        end

        opts.on("-u", "--follow STRING",
                "Used in conjunction with -m, this will add a",
                "  new action to the end of the list, for",
                "  follow-up procedure.", String)\
        do |v|
            options.follow_flag = true
            options.follow_content = v
        end

        opts.on_tail("-h", "--help", "Display this message.") do |v|
            puts opts
            options.help_flag = true
            exit
        end

        begin
        options.rest = opts.parse(args)
        # perform_sanity_check(options)
        list = File.new("autofocus","r+")
        process(options,list)
        rescue Exception
            raise
        ensure
            list.close unless(options.help_flag)
        end

        options
    end # self.parse()

    # def self.perform_sanity_check(options_struct)
    #     if !options_struct.mark_flag && options_struct.follow_flag
    #         raise ArgumentError, "Cannot use -u without -m."
    #     end
    # end # self.perform_sanity_check(options_struct)

    def self.process(options, file)
        if (options.list_flag && options.numbers_flag)
            # Do listing with numbers.
            lines = file.lines.to_a
            lines = lines.zip((1..(lines.length)).to_a)
            nlines = lines.map{|v,i| "#{i}-> #{v}"}
            puts nlines.join()
        elsif (options.list_flag)
            # Do listing
            lines = file.lines.to_a
            puts lines.join()
        elsif (options.add_flag)
            # Do addition
        elsif (options.change_flag && options.change_number)
            # Do change
        elsif (options.mark_flag && options.mark_number && options.follow_flag)
            # Do mark and follow
        elsif (options.mark_flag && options.mark_number)
            # Do plain mark
        else
            raise ArgumentError, "I don't know what you mean."
        end
    end
end # class AutoFocusCommandLine

options = AutoFocusCommandLine.parse(ARGV)
