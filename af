#!/usr/bin/env ruby

# Autofocus Computerized Automation System
# Author: CBlair1986@gmail.com

require 'optparse'
require 'ostruct'

# Main class, contains all of the functionality. In comments, I will abbreviate
# the name to ACAS.
class AutofocusComputerizedAutomationSystem
    # Parses command-line options, sets requisite variables in options
    def self.parse(args)
        options = OpenStruct.new
        opts = OptionParser.new

        options.filename = File.dirname($0) << "/autofocus"

        # Section handling adding an item
        opts.on("-a","--add STRING","Add an item to the end of the list",
                String)\
                do |v|
            options.add_flag = true
            options.add_content = v
                end

        # Provides the ability to use a different file, for management of
        # different lists.
        opts.on("--file String","Specify a different file to use.", String)\
            do |v|
            options.filename = v
            end

        # Handles changing an item
        opts.on("-c", "--change NUMBER",
                "Change the numbered entry to something else,",
                "  eg. to fix a typo.", Integer)\
                do |v|
            options.change_flag = true
            options.change_number = v - 1
                end

        # Handles listing of the items
        opts.on("-l", "--list", "List a 'page' of actions, defaulting to the",
                "  first one with pending actions on it.")\
                do
            options.list_flag = true
                end

        # Sets a switch to show item numbers in the list
        opts.on("-n", "--numbers", "Used with -l, shows the numbers of the actions.")\
            do
            options.numbers_flag = true
            end

        # Handles marking an item as done
        opts.on("-m", "--mark NUMBER", "Mark the numbered entry as done.",
                Integer)\
                do |v|
            options.mark_flag = true
            options.mark_number = v - 1
                end

        # Handles un-marking an item.
        opts.on("-u","--unmark NUMBER", "UN-Mark the numbered entry.",
                Integer)\
                do |v|
            options.unmark_flag = true
            options.unmark_number = v - 1
                end

        # Option to add a follow-up item. Its behavior is due to be changed...
        opts.on("-f", "--follow",
                "Used in conjunction with -m, this will add a",
                "  new action to the end of the list, for",
                "  follow-up procedure.")\
                do |v|
            options.follow_flag = true
                end

        # Show help
        opts.on_tail("-h", "--help", "--usage", "Display this message.") do |v|
            puts opts
            options.help_flag = true
            exit
        end

        # If there are no arguments, show the help info and exit
        if (args.empty?)
            puts opts
            exit
        end

        # The entry point for the logic. It will raise any errors that are raised.
        begin
            options.rest = opts.parse(args)
            process(options,options.filename)
        rescue Exception
            raise
        end

        options
    end # self.parse()

    # Main program logic
    def self.process(options, filename)
        if (options.list_flag && options.numbers_flag)
            # We are listing with numbers
            File.open(filename) do |file|
                # Do listing with numbers.
                lines = file.lines.to_a.reverse
                lines = lines.zip((1..(lines.length)).to_a)
                lines = lines.reverse
                max_length = (lines.length+1).to_s.length
                nlines = lines.map{|v,i| "#{i.to_s.ljust(max_length)} -> #{v}"}
                nlines.each do |line|
                    display_line(line)
                end
            end
        elsif (options.list_flag)
            # We are listing without numbers
            File.open(filename) do |file|
                # Do listing
                lines = file.lines.to_a
                lines.each do |line|
                    display_line(line)
                end
            end
        elsif (options.add_flag)
            # We are adding an item
            File.open(filename,"a+") do |file|
                # Do addition
                # If there are no other flags, then I can assume that options.rest
                # is an additional array of strings, since the user was too lazy to
                # use quotes on the commandline. (Or he forgot)
                line = file.lines.to_a.length + 1
                unless (options.change_flag || options.list_flag ||
                        options.mark_flag || options.follow_flag)
                    if (options.rest)
                        puts "1 -> " << '[ ] ' << options.add_content << ' ' << options.rest.join(" ")
                        file.puts '[ ] ' << options.add_content << ' ' << options.rest.join(" ")
                    else
                        puts "1 -> " << '[ ] ' << options.add_content
                        file.puts '[ ] ' << options.add_content
                    end
                else
                    raise ArgumentError, "Too many commands."
                end
            end
        elsif (options.change_flag && options.change_number)
            # We are changing an item
            if (File.exist?(filename))
                lines, lines_prev, lines_next = nil
                File.open(filename,"r") do |file|
                    # Do change
                    # Basically the same as list, except we seek to the line number (to
                    # which one has already been added), and change the entire line to
                    # be something new.
                    # options.rest is assumed to be the changed line.
                    lines = file.readlines.reverse
                end
                lines[options.change_number] = "[ ] " << options.rest.join(" ") << "\n"
                File.open(filename,"w") do |file|
                    # This'll be where we write the new file. It's a bit
                    # clunky, but I'm not going to have files over 100
                    # Megabytes, I think.
                    file.write lines.reverse
                end
            else
                raise ArgumentError, "No file."
            end
        elsif (options.mark_flag && options.mark_number && options.follow_flag)
            # Handle Follow-up items. Used with the mark command. If
            # options.rest is empty, it simply duplicates 
            lines = nil
            File.open(filename,"r+") do |file|
                # Do mark and follow
                lines = file.readlines.reverse
            end
            line = lines[options.mark_number]
            newline = line.gsub(/\[ \]/, "[*]")
            lines[options.mark_number] = newline
            if options.rest.length > 0
                followline = "[ ] " << options.rest.join(" ")
            else
                followline = line
            end
            File.open(filename,"w") do |file|
                file.write lines.reverse
                file.puts followline
            end
        elsif (options.mark_flag && options.mark_number)
            # We are marking an item as done
            lines = nil
            File.open(filename,"r+") do |file|
                # Do plain mark
                lines = file.readlines.reverse
            end
            line = lines[options.mark_number]
            newline = line.gsub(/\[ \]/, "[*]")
            lines[options.mark_number] = newline
            File.open(filename,"w") do |file|
                file.write lines.reverse
            end
        elsif (options.unmark_flag && options.unmark_number)
            # We are unmarking an item
            lines = nil
            File.open(filename,"r") do |file|
                # Do unmark
                lines = file.readlines.reverse
            end
            line = lines[options.unmark_number]
            newline = line.gsub(/\[\*\]/,"[ ]")
            lines[options.unmark_number] = newline
            File.open(filename,"w") do |file|
                file.write lines.reverse
            end
        else
            # We don't understand!
            raise ArgumentError, "I don't know what you mean."
        end
    end # self.process(options, filename)

    def self.display_line( a_string )
        if /\[\*\]/ =~ a_string
            # Display the line with a subtler color
            # With ANSI code? Sure, why not.
            subtle_color = "\e[90m"
            end_color = "\e[m"
            print subtle_color
            puts a_string
            print end_color
        else
            # Display the line full-on
            puts a_string
        end
    end # self.display_line( a_string )
end # class AutofocusComputerizedAutomationSystem

options = AutofocusComputerizedAutomationSystem.parse(ARGV)
